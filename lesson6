import { ApiPromise, WsProvider, Keyring} from '@polkadot/api';
import '@polkadot/api-augment';
import type { FrameSystemAccountInfo } from "@polkadot/types/lookup";
import {KeyringPair } from '@polkadot/keyring/types';

const sleep = (ms: number) => new Promise( r=>setTimeout(r,ms));
const WEB_SOCKET = 'ws://127.0.0.1:9944';
const connect = async() => {
const wsProvider = new WsProvider(WEB_SOCKET);
const api = await ApiPromise.create({provider: wsProvider, types :{}});
await api.isReady;
return api;

}
const getConst = async( api: ApiPromise) => {
const  existentialDeposit = await api.consts.balances.existentialDeposit.toHuman();
return existentialDeposit;
}
const getFreeBalance = async( api: ApiPromise, address: string) => {
const { data: {free,}, }: FrameSystemAccountInfo = await api.query.system.account(address);
return free ;
}
const transfer = async ( api: ApiPromise, alice: KeyringPair, bob: string, amount: number) => {
await api.tx.balances.transfer(bob,amount)
.signAndSend(alice,res=>{
console.log("Tx status: $(res.status)");
});
}

const getMetadata = async(api: ApiPromise) => {
const metadata = await api.rpc.state.getMetadata();
return metadata.toString();
}
const subscribe = async(api: ApiPromise, address: string) => {
await api.query.system.account(address, aliceInfo => {
const free = aliceInfo.data.free;
console.log('freebalance is: ', free.toHuman());
});
// api.query.template.something(accountAddress, (result) => {
// console.log(`Something Value Updated: ${result}`);
// });
}
const subscribeEvt = async(api: ApiPromise ) => {
await api.query.system.events(events => {
events.forEach( function(event) {

```
	// if (api.events.template.SomethingStored.is(event)) {
    // const { args } = event.toJSON();
    // const value = args;

    // console.log(`SomethingStored Event: ${value}`);
  // }

		console.log('index : ',event['event']['index'].toHuman());
		console.log('data  : ',event['event']['data'].toHuman());
	})
});

```

}

async function doSomething (api: ApiPromise, alice: KeyringPair, something: number) {
await api.tx.templateModule.doSomething(something).signAndSend(alice, res => {
console.log('tx status: ', res);
});
}
async function getSomething(api: ApiPromise) {
//await api.query.templateModule
return await api.query.templateModule.something();
}
const main = async() => {
const api = await connect();
const deposit = await getConst(api);
console.log("deposit is ", deposit);
console.log("main function");

```
const keyring = new Keyring({type: 'sr25519'});
const alice = keyring.addFromUri('//Alice');
const bob = keyring.addFromUri('//Bob');

console.log('metadata is: ',await getSomething(api ));
await doSomething(api, alice, 123);

// await subscribeEvt(api );
// await subscribe(api, alice.address);
// await sleep(5000);

// // await getMetadata(api));
// const free = await getFreeBalance(api, alice.address);
// const bob_blance = await getFreeBalance(api, bob.address);
// console.log("Bob-balance is ", bob_blance.toHuman());

// await transfer(api, alice, bob.address, 10 **10 + 2 );
// await sleep(5000);
// const bob_blance2 = await getFreeBalance(api, bob.address);
// console.log("After tx, Bob-balance is ", bob_blance2.toHuman());

```

}

main()
.then(()=> {
console.log('exists with success');
process.exit(0);
})
.catch(err=>{
console.log('error is ', err);
process.exit(1);
})
